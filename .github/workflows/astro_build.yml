# Workflow for building an Astro site and deploying to a 'dist' branch
name: Build and Deploy Astro site to 'dist' branch

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to a branch
permissions:
  contents: write

# Define environment variables
env:
  BUILD_PATH: '.' # default value when not using subfolders

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build Astro site
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build
        working-directory: ${{ env.BUILD_PATH }}

      - name: Deploy to dist branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Switch to a new dist branch
          git checkout --orphan dist

          # Add build files to dist branch
          git --work-tree=${{ env.BUILD_PATH }}/dist add --all

          # Commit and push to the dist branch
          git --work-tree=${{ env.BUILD_PATH }}/dist commit -m "Deploy site to dist branch"
          git push origin dist --force
